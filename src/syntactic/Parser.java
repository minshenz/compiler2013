
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 18 00:11:41 CST 2013
//----------------------------------------------------

package syntactic;

import java_cup.runtime.*;
import java.io.InputStream;
import ast.*;
import ast.Number;
import util.Position;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 18 00:11:41 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\004\000\002\060\002\000\002\005\007" +
    "\000\002\005\005\000\002\005\004\000\002\003\010\000" +
    "\002\003\007\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\004\000\002\010\003\000\002\010" +
    "\005\000\002\015\003\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\020\003\000\002\020\005\000" +
    "\002\017\003\000\002\017\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\004\000\002\021\007\000\002\021\006\000\002\021\004" +
    "\000\002\021\007\000\002\021\006\000\002\012\005\000" +
    "\002\012\006\000\002\013\004\000\002\011\006\000\002" +
    "\011\005\000\002\011\004\000\002\011\003\000\002\033" +
    "\005\000\002\033\006\000\002\014\003\000\002\014\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\025\004\000\002" +
    "\025\003\000\002\027\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\002\000\002\061\002\000\002\062\002" +
    "\000\002\026\007\000\002\004\003\000\002\004\004\000" +
    "\002\023\003\000\002\023\004\000\002\024\011\000\002" +
    "\024\007\000\002\030\007\000\002\030\010\000\002\030" +
    "\011\000\002\030\011\000\002\030\012\000\002\030\011" +
    "\000\002\030\012\000\002\030\012\000\002\030\013\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\031\004\000\002\034\003\000\002\034\005\000\002\035" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\032\003\000\002\036" +
    "\003\000\002\036\005\000\002\037\003\000\002\037\005" +
    "\000\002\040\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\005\000\002\042\003\000\002\042\005\000\002" +
    "\043\003\000\002\043\005\000\002\043\005\000\002\044" +
    "\003\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\045\003\000\002\045\005\000" +
    "\002\045\005\000\002\046\003\000\002\046\005\000\002" +
    "\046\005\000\002\047\003\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\050\003\000\002\050\006" +
    "\000\002\051\003\000\002\051\004\000\002\052\003\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\006\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\053\003\000\002\053\004\000\002\054\005\000" +
    "\002\054\005\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\054\003\000\002\054\003\000\002\055" +
    "\003\000\002\055\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\005\000\002\057\003\000" +
    "\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\022\002\000\060\014\061\012\062\016\063" +
    "\004\064\010\065\007\100\015\001\002\000\012\006\uffe7" +
    "\046\uffe7\053\uffe7\076\uffe7\001\002\000\022\002\000\060" +
    "\014\061\012\062\016\063\004\064\010\065\007\100\015" +
    "\001\002\000\022\002\000\060\014\061\012\062\016\063" +
    "\004\064\010\065\007\100\015\001\002\000\006\047\u0119" +
    "\076\u0118\001\002\000\006\047\u010e\076\u010d\001\002\000" +
    "\010\006\022\053\256\076\020\001\002\000\012\006\uffe9" +
    "\046\uffe9\053\uffe9\076\uffe9\001\002\000\004\002\255\001" +
    "\002\000\016\061\012\062\016\063\004\064\010\065\007" +
    "\100\015\001\002\000\012\006\uffe6\046\uffe6\053\uffe6\076" +
    "\uffe6\001\002\000\012\006\uffe8\046\uffe8\053\uffe8\076\uffe8" +
    "\001\002\000\006\006\022\076\020\001\002\000\020\021" +
    "\uffd6\045\uffd6\046\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\001\002\000\006\053\ufff3\054\253\001\002\000\006\006" +
    "\022\076\020\001\002\000\004\053\ufffd\001\002\000\020" +
    "\021\uffd9\045\025\046\uffd9\051\026\053\uffd9\054\uffd9\055" +
    "\uffd9\001\002\000\020\046\241\061\012\062\016\063\004" +
    "\064\010\065\007\100\015\001\002\000\036\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\016\021\uffda\046\uffda\051\030\053\uffda\054\uffda" +
    "\055\uffda\001\002\000\036\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\075\034" +
    "\076\051\077\054\101\064\102\056\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\052\004\227\005\230\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\046\uff8f\050\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\001\002\000\032\014\uff9a\015" +
    "\uff9a\016\uff9a\034\223\035\224\042\uff9a\043\uff9a\046\uff9a" +
    "\050\uff9a\052\uff9a\053\uff9a\054\uff9a\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\217\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\036\004\035\005\061\006\031\011\053" +
    "\012\057\013\055\014\047\044\037\045\044\075\034\076" +
    "\051\077\054\101\064\102\056\001\002\000\122\004\uff6d" +
    "\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\045\uff6d\046\uff6d\050" +
    "\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\056\uff6d\057\uff6d" +
    "\001\002\000\036\004\035\005\061\006\031\011\053\012" +
    "\057\013\055\014\047\044\037\045\044\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\122\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\014\uff79" +
    "\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79" +
    "\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\045\uff79\046\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\056\uff79\057\uff79\001" +
    "\002\000\004\052\214\001\002\000\042\014\uff97\015\uff97" +
    "\016\uff97\034\uff97\035\uff97\036\204\037\205\040\206\041" +
    "\207\042\uff97\043\uff97\046\uff97\050\uff97\052\uff97\053\uff97" +
    "\054\uff97\001\002\000\016\042\202\046\uffa4\050\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\001\002\000\052\004\035\005\061" +
    "\006\031\011\053\012\057\013\055\014\047\044\037\045" +
    "\044\061\012\062\016\063\004\064\010\065\007\075\034" +
    "\076\051\077\054\100\015\101\064\102\056\001\002\000" +
    "\060\004\uff8c\005\uff8c\006\171\007\170\010\167\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\046\uff8c" +
    "\050\uff8c\052\uff8c\053\uff8c\054\uff8c\001\002\000\020\042" +
    "\uffa2\043\165\046\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\001\002\000\036\004\035\005\061\006\031\011\053\012" +
    "\057\013\055\014\047\044\037\045\044\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\046\014\uff92\015" +
    "\uff92\016\uff92\017\161\020\160\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\046\uff92\050" +
    "\uff92\052\uff92\053\uff92\054\uff92\001\002\000\122\004\uff6e" +
    "\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e" +
    "\040\uff6e\041\uff6e\042\uff6e\043\uff6e\045\uff6e\046\uff6e\050" +
    "\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e" +
    "\001\002\000\022\015\156\042\uffa0\043\uffa0\046\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\001\002\000\036\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\150\075\034\076\051\077\054\101\064\102\056" +
    "\001\002\000\122\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\045\uff6a\046\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a" +
    "\054\uff6a\056\uff6a\057\uff6a\001\002\000\036\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\122\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69" +
    "\011\uff69\012\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020" +
    "\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035" +
    "\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\045\uff69\046\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054" +
    "\uff69\056\uff69\057\uff69\001\002\000\036\004\035\005\061" +
    "\006\031\011\053\012\057\013\055\014\047\044\037\045" +
    "\150\075\034\076\051\077\054\101\064\102\056\001\002" +
    "\000\122\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011" +
    "\075\012\076\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84" +
    "\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\045" +
    "\100\046\uff84\050\uff84\051\101\052\uff84\053\uff84\054\uff84" +
    "\056\074\057\077\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\004\052\uffa5\001\002\000\026\014\071\015\uff9c\016\uff9c" +
    "\042\uff9c\043\uff9c\046\uff9c\050\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\001\002\000\122\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\014\uff6c\015\uff6c\016\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\045\uff6c\046\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\056\uff6c\057\uff6c\001\002\000\024\015\uff9e" +
    "\016\067\042\uff9e\043\uff9e\046\uff9e\050\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\001\002\000\106\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\010\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\046\uff88\050\uff88\052\uff88\053\uff88\054\uff88\001\002\000" +
    "\036\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\022\015\uff9d\042\uff9d\043\uff9d" +
    "\046\uff9d\050\uff9d\052\uff9d\053\uff9d\054\uff9d\001\002\000" +
    "\036\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\024\015\uff9b\016\uff9b\042\uff9b" +
    "\043\uff9b\046\uff9b\050\uff9b\052\uff9b\053\uff9b\054\uff9b\001" +
    "\002\000\106\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\046\uff7c\050\uff7c" +
    "\052\uff7c\053\uff7c\054\uff7c\001\002\000\004\076\147\001" +
    "\002\000\122\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72" +
    "\011\uff72\012\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72" +
    "\045\uff72\046\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054" +
    "\uff72\056\uff72\057\uff72\001\002\000\122\004\uff71\005\uff71" +
    "\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\014\uff71\015" +
    "\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\045\uff71\046\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\054\uff71\056\uff71\057\uff71\001\002" +
    "\000\004\076\146\001\002\000\040\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\046\140\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\036\004\035\005\061\006\031\011\053\012\057" +
    "\013\055\014\047\044\037\045\044\075\034\076\051\077" +
    "\054\101\064\102\056\001\002\000\122\004\uff78\005\uff78" +
    "\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\045\uff78\046\uff78\050\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\056\uff78\057\uff78\001\002" +
    "\000\012\046\uffb3\052\uffb3\053\uffb3\054\136\001\002\000" +
    "\004\052\135\001\002\000\014\046\uffb1\050\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\001\002\000\106\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\014\uff88\015\uff88\016\uff88\017\uff88" +
    "\020\uff88\021\115\022\110\023\113\024\116\025\111\026" +
    "\112\027\121\030\120\031\114\032\107\033\117\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\046\uff88\050\uff88\052\uff88\053\uff88\054\uff88\001\002" +
    "\000\036\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\075\034\076\051\077\054" +
    "\101\064\102\056\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\036\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\036\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\036" +
    "\004\035\005\061\006\031\011\053\012\057\013\055\014" +
    "\047\044\037\045\044\075\034\076\051\077\054\101\064" +
    "\102\056\001\002\000\036\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\075\034" +
    "\076\051\077\054\101\064\102\056\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\036\004\035\005\061\006\031\011\053" +
    "\012\057\013\055\014\047\044\037\045\044\075\034\076" +
    "\051\077\054\101\064\102\056\001\002\000\036\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\044\075\034\076\051\077\054\101\064\102\056" +
    "\001\002\000\036\004\035\005\061\006\031\011\053\012" +
    "\057\013\055\014\047\044\037\045\044\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\036\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\014\046\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\001\002\000\014\046\uffa9\050\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\001\002\000\014\046\uffa6\050\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\001\002\000\014\046\uffad\050\uffad\052\uffad\053" +
    "\uffad\054\uffad\001\002\000\014\046\uffb0\050\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\001\002\000\014\046\uffa8\050\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\001\002\000\014\046\uffae\050\uffae" +
    "\052\uffae\053\uffae\054\uffae\001\002\000\014\046\uffab\050" +
    "\uffab\052\uffab\053\uffab\054\uffab\001\002\000\014\046\uffac" +
    "\050\uffac\052\uffac\053\uffac\054\uffac\001\002\000\014\046" +
    "\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\001\002\000\014" +
    "\046\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7\001\002\000" +
    "\122\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77" +
    "\012\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\045\uff77" +
    "\046\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\056" +
    "\uff77\057\uff77\001\002\000\036\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\010" +
    "\046\uffb2\052\uffb2\053\uffb2\001\002\000\122\004\uff75\005" +
    "\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\014\uff75" +
    "\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\045\uff75\046\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\056\uff75\057\uff75\001" +
    "\002\000\006\046\uff70\054\144\001\002\000\004\046\143" +
    "\001\002\000\122\004\uff76\005\uff76\006\uff76\007\uff76\010" +
    "\uff76\011\uff76\012\uff76\014\uff76\015\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026" +
    "\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\045\uff76\046\uff76\050\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\056\uff76\057\uff76\001\002\000\036\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\004\046\uff6f\001\002\000\122\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\041\uff73\042\uff73\043\uff73\045\uff73\046\uff73\050\uff73\051" +
    "\uff73\052\uff73\053\uff73\054\uff73\056\uff73\057\uff73\001\002" +
    "\000\122\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74" +
    "\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027" +
    "\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\045" +
    "\uff74\046\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\056\uff74\057\uff74\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\106\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\046\uff82\050\uff82\052\uff82" +
    "\053\uff82\054\uff82\001\002\000\004\046\153\001\002\000" +
    "\122\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\045\uff6b" +
    "\046\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\056" +
    "\uff6b\057\uff6b\001\002\000\106\004\uff7b\005\uff7b\006\uff7b" +
    "\007\uff7b\010\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b" +
    "\046\uff7b\050\uff7b\052\uff7b\053\uff7b\054\uff7b\001\002\000" +
    "\106\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\046\uff83\050\uff83\052\uff83" +
    "\053\uff83\054\uff83\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\020\042\uff9f\043\uff9f\046\uff9f\050\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\001\002\000\036\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\075\034" +
    "\076\051\077\054\101\064\102\056\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\042\014\uff91\015\uff91\016\uff91\034\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\046\uff91\050\uff91\052\uff91\053\uff91\054\uff91\001\002" +
    "\000\042\014\uff90\015\uff90\016\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\046\uff90" +
    "\050\uff90\052\uff90\053\uff90\054\uff90\001\002\000\106\004" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\046\uff7f\050\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\001\002\000\036\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\075\034" +
    "\076\051\077\054\101\064\102\056\001\002\000\016\042" +
    "\uffa1\046\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\001\002" +
    "\000\036\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\075\034\076\051\077\054" +
    "\101\064\102\056\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\036\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\052\004\uff8b\005\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\046\uff8b" +
    "\050\uff8b\052\uff8b\053\uff8b\054\uff8b\001\002\000\052\004" +
    "\uff8a\005\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\046\uff8a\050\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\001\002\000\052\004\uff89\005\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\020\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\046\uff89\050\uff89\052" +
    "\uff89\053\uff89\054\uff89\001\002\000\006\006\uff86\046\uff86" +
    "\001\002\000\006\006\200\046\177\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\006\006\uff85\046\uff85\001\002\000\106" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\046\uff87\050\uff87\052\uff87\053" +
    "\uff87\054\uff87\001\002\000\036\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\014" +
    "\046\uffa3\050\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002\000" +
    "\036\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\036\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\036" +
    "\004\035\005\061\006\031\011\053\012\057\013\055\014" +
    "\047\044\037\045\044\075\034\076\051\077\054\101\064" +
    "\102\056\001\002\000\036\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\075\034" +
    "\076\051\077\054\101\064\102\056\001\002\000\032\014" +
    "\uff93\015\uff93\016\uff93\034\uff93\035\uff93\042\uff93\043\uff93" +
    "\046\uff93\050\uff93\052\uff93\053\uff93\054\uff93\001\002\000" +
    "\032\014\uff94\015\uff94\016\uff94\034\uff94\035\uff94\042\uff94" +
    "\043\uff94\046\uff94\050\uff94\052\uff94\053\uff94\054\uff94\001" +
    "\002\000\032\014\uff95\015\uff95\016\uff95\034\uff95\035\uff95" +
    "\042\uff95\043\uff95\046\uff95\050\uff95\052\uff95\053\uff95\054" +
    "\uff95\001\002\000\032\014\uff96\015\uff96\016\uff96\034\uff96" +
    "\035\uff96\042\uff96\043\uff96\046\uff96\050\uff96\052\uff96\053" +
    "\uff96\054\uff96\001\002\000\016\021\uffd7\046\uffd7\051\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\001\002\000\106\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\010\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\043\uff7a\046\uff7a\050\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\001\002\000\106\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\046\uff7d\050" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\001\002\000\052\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\044\061\012\062\016\063\004\064\010\065\007" +
    "\075\034\076\051\077\054\100\015\101\064\102\056\001" +
    "\002\000\106\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\uff81\043\uff81\046\uff81\050\uff81" +
    "\052\uff81\053\uff81\054\uff81\001\002\000\006\006\200\046" +
    "\222\001\002\000\106\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\046\uff80" +
    "\050\uff80\052\uff80\053\uff80\054\uff80\001\002\000\036\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\036\004\035\005\061\006\031\011\053" +
    "\012\057\013\055\014\047\044\037\045\044\075\034\076" +
    "\051\077\054\101\064\102\056\001\002\000\026\014\uff98" +
    "\015\uff98\016\uff98\042\uff98\043\uff98\046\uff98\050\uff98\052" +
    "\uff98\053\uff98\054\uff98\001\002\000\026\014\uff99\015\uff99" +
    "\016\uff99\042\uff99\043\uff99\046\uff99\050\uff99\052\uff99\053" +
    "\uff99\054\uff99\001\002\000\036\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\036" +
    "\004\035\005\061\006\031\011\053\012\057\013\055\014" +
    "\047\044\037\045\044\075\034\076\051\077\054\101\064" +
    "\102\056\001\002\000\046\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\046\uff8d\050\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\001\002\000\046\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\046\uff8e\050\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\001\002\000\106\004\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e" +
    "\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\046\uff7e\050\uff7e\052\uff7e\053\uff7e\054\uff7e\001\002" +
    "\000\004\052\235\001\002\000\016\021\uffd8\046\uffd8\051" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000\010\046\ufff7" +
    "\054\246\055\ufff7\001\002\000\006\006\022\076\020\001" +
    "\002\000\006\046\ufff5\055\244\001\002\000\014\021\uffdb" +
    "\046\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\004\046" +
    "\243\001\002\000\014\021\uffdc\046\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\001\002\000\004\046\ufff4\001\002\000\010\046" +
    "\uffdd\054\uffdd\055\uffdd\001\002\000\016\061\012\062\016" +
    "\063\004\064\010\065\007\100\015\001\002\000\006\046" +
    "\ufff6\055\ufff6\001\002\000\004\053\251\001\002\000\100" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\053\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\001\002\000" +
    "\020\021\uffd5\045\uffd5\046\uffd5\051\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\001\002\000\006\006\022\076\020\001\002\000" +
    "\004\053\ufff2\001\002\000\004\002\001\001\002\000\100" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa\053\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000" +
    "\010\021\u0104\053\uffef\054\uffef\001\002\000\006\053\ufff1" +
    "\054\u0102\001\002\000\004\053\u0101\001\002\000\014\021" +
    "\uffd9\045\263\051\026\053\uffd9\054\uffd9\001\002\000\020" +
    "\046\264\061\012\062\016\063\004\064\010\065\007\100" +
    "\015\001\002\000\012\021\uffdb\047\uffc9\053\uffdb\054\uffdb" +
    "\001\002\000\004\046\266\001\002\000\012\021\uffdc\047" +
    "\uffc9\053\uffdc\054\uffdc\001\002\000\004\047\271\001\002" +
    "\000\022\002\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\100\ufff9\001\002\000\076\004\035\005\061" +
    "\006\031\011\053\012\057\013\055\014\047\044\037\045" +
    "\044\047\uffc9\050\uffca\053\277\060\014\061\012\062\016" +
    "\063\004\064\010\065\007\066\303\070\312\071\276\072" +
    "\274\073\307\074\306\075\034\076\051\077\054\100\015" +
    "\101\064\102\056\001\002\000\004\050\uffcb\001\002\000" +
    "\062\004\uffd2\005\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\053\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\076\uffd2\077\uffd2\101\uffd2\102\uffd2\001\002\000" +
    "\004\053\377\001\002\000\004\050\uffc8\001\002\000\004" +
    "\045\337\001\002\000\062\004\uffce\005\uffce\006\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\044\uffce\045\uffce\047\uffce" +
    "\050\uffce\053\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072" +
    "\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce" +
    "\102\uffce\001\002\000\010\006\022\053\256\076\020\001" +
    "\002\000\062\004\uffd3\005\uffd3\006\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\053" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102\uffd3\001" +
    "\002\000\062\004\uffd4\005\uffd4\006\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\053" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4\102\uffd4\001" +
    "\002\000\004\045\331\001\002\000\004\053\330\001\002" +
    "\000\060\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\047\uffc9\050\uffc4\053\277" +
    "\066\303\070\312\071\276\072\274\073\307\074\306\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\040" +
    "\004\035\005\061\006\031\011\053\012\057\013\055\014" +
    "\047\044\037\045\044\053\324\075\034\076\051\077\054" +
    "\101\064\102\056\001\002\000\004\053\323\001\002\000" +
    "\062\004\uffd1\005\uffd1\006\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\053\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\001\002\000" +
    "\062\004\uffd0\005\uffd0\006\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\053\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\001\002\000" +
    "\004\045\317\001\002\000\060\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\047" +
    "\uffc9\050\uffcc\053\277\066\303\070\312\071\276\072\274" +
    "\073\307\074\306\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\076\004\uffc6\005\uffc6\006\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\044\uffc6\045\uffc6\047\uffc6\050" +
    "\uffc6\053\uffc6\060\014\061\012\062\016\063\004\064\010" +
    "\065\007\066\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\015\101\uffc6\102\uffc6" +
    "\001\002\000\060\004\uffc5\005\uffc5\006\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5" +
    "\053\uffc5\066\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5\001\002" +
    "\000\004\050\uffcd\001\002\000\036\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\004\046\321\001\002\000\056\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\047" +
    "\uffc9\053\277\066\303\070\312\071\276\072\274\073\307" +
    "\074\306\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\062\004\uffc0\005\uffc0\006\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\053" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0\001" +
    "\002\000\062\004\uffb6\005\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\053" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\001" +
    "\002\000\062\004\uffb4\005\uffb4\006\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\053" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4\102\uffb4\001" +
    "\002\000\004\053\326\001\002\000\062\004\uffb5\005\uffb5" +
    "\006\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\044\uffb5\045" +
    "\uffb5\047\uffb5\050\uffb5\053\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\101\uffb5\102\uffb5\001\002\000\004\050\uffc3\001\002" +
    "\000\062\004\uffcf\005\uffcf\006\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\053\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf\102\uffcf\001\002" +
    "\000\036\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\075\034\076\051\077\054" +
    "\101\064\102\056\001\002\000\004\046\333\001\002\000" +
    "\056\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\047\uffc9\053\277\066\303\070" +
    "\312\071\276\072\274\073\307\074\306\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\062\004\uffc1\005" +
    "\uffc1\006\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\044\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\053\uffc1\066\uffc1\067\335\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\101\uffc1\102\uffc1\001\002\000\056\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\047\uffc9\053\277\066\303\070\312\071\276\072" +
    "\274\073\307\074\306\075\034\076\051\077\054\101\064" +
    "\102\056\001\002\000\062\004\uffc2\005\uffc2\006\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\044\uffc2\045\uffc2\047\uffc2" +
    "\050\uffc2\053\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\101\uffc2" +
    "\102\uffc2\001\002\000\040\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\053\340" +
    "\075\034\076\051\077\054\101\064\102\056\001\002\000" +
    "\040\004\035\005\061\006\031\011\053\012\057\013\055" +
    "\014\047\044\037\045\044\053\360\075\034\076\051\077" +
    "\054\101\064\102\056\001\002\000\004\053\342\001\002" +
    "\000\040\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\053\343\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\040\004\035\005" +
    "\061\006\031\011\053\012\057\013\055\014\047\044\037" +
    "\045\044\046\353\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\004\053\345\001\002\000\040\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\044\046\346\075\034\076\051\077\054\101\064" +
    "\102\056\001\002\000\056\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\047\uffc9" +
    "\053\277\066\303\070\312\071\276\072\274\073\307\074" +
    "\306\075\034\076\051\077\054\101\064\102\056\001\002" +
    "\000\004\046\350\001\002\000\056\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\047\uffc9\053\277\066\303\070\312\071\276\072\274\073" +
    "\307\074\306\075\034\076\051\077\054\101\064\102\056" +
    "\001\002\000\062\004\uffb8\005\uffb8\006\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\053\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8\102\uffb8" +
    "\001\002\000\062\004\uffb9\005\uffb9\006\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9" +
    "\053\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9" +
    "\001\002\000\056\004\035\005\061\006\031\011\053\012" +
    "\057\013\055\014\047\044\037\045\044\047\uffc9\053\277" +
    "\066\303\070\312\071\276\072\274\073\307\074\306\075" +
    "\034\076\051\077\054\101\064\102\056\001\002\000\004" +
    "\046\355\001\002\000\056\004\035\005\061\006\031\011" +
    "\053\012\057\013\055\014\047\044\037\045\044\047\uffc9" +
    "\053\277\066\303\070\312\071\276\072\274\073\307\074" +
    "\306\075\034\076\051\077\054\101\064\102\056\001\002" +
    "\000\062\004\uffba\005\uffba\006\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\044\uffba\045\uffba\047\uffba\050\uffba\053\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\077\uffba\101\uffba\102\uffba\001\002" +
    "\000\062\004\uffbb\005\uffbb\006\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\053\uffbb" +
    "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\101\uffbb\102\uffbb\001\002" +
    "\000\040\004\035\005\061\006\031\011\053\012\057\013" +
    "\055\014\047\044\037\045\044\046\370\075\034\076\051" +
    "\077\054\101\064\102\056\001\002\000\004\053\362\001" +
    "\002\000\040\004\035\005\061\006\031\011\053\012\057" +
    "\013\055\014\047\044\037\045\044\046\363\075\034\076" +
    "\051\077\054\101\064\102\056\001\002\000\056\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\044\047\uffc9\053\277\066\303\070\312\071\276" +
    "\072\274\073\307\074\306\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\004\046\365\001\002\000\056" +
    "\004\035\005\061\006\031\011\053\012\057\013\055\014" +
    "\047\044\037\045\044\047\uffc9\053\277\066\303\070\312" +
    "\071\276\072\274\073\307\074\306\075\034\076\051\077" +
    "\054\101\064\102\056\001\002\000\062\004\uffbc\005\uffbc" +
    "\006\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\044\uffbc\045" +
    "\uffbc\047\uffbc\050\uffbc\053\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\101\uffbc\102\uffbc\001\002\000\062\004\uffbd\005\uffbd" +
    "\006\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\044\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\053\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\101\uffbd\102\uffbd\001\002\000\056\004\035\005\061" +
    "\006\031\011\053\012\057\013\055\014\047\044\037\045" +
    "\044\047\uffc9\053\277\066\303\070\312\071\276\072\274" +
    "\073\307\074\306\075\034\076\051\077\054\101\064\102" +
    "\056\001\002\000\004\046\372\001\002\000\056\004\035" +
    "\005\061\006\031\011\053\012\057\013\055\014\047\044" +
    "\037\045\044\047\uffc9\053\277\066\303\070\312\071\276" +
    "\072\274\073\307\074\306\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\062\004\uffbe\005\uffbe\006\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\044\uffbe\045\uffbe\047" +
    "\uffbe\050\uffbe\053\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\101" +
    "\uffbe\102\uffbe\001\002\000\062\004\uffbf\005\uffbf\006\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\050\uffbf\053\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\101" +
    "\uffbf\102\uffbf\001\002\000\004\050\376\001\002\000\102" +
    "\002\uffc7\004\uffc7\005\uffc7\006\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\053\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\001" +
    "\002\000\062\004\uffb7\005\uffb7\006\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\053" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7\001" +
    "\002\000\022\002\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\100\ufff8\001\002\000\100\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\044\ufffb\045\ufffb\047\ufffb\050\ufffb\053\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\001\002\000\006\006\022" +
    "\076\020\001\002\000\004\053\ufff0\001\002\000\040\004" +
    "\035\005\061\006\031\011\053\012\057\013\055\014\047" +
    "\044\037\045\044\047\u0105\075\034\076\051\077\054\101" +
    "\064\102\056\001\002\000\040\004\035\005\061\006\031" +
    "\011\053\012\057\013\055\014\047\044\037\045\044\047" +
    "\u0105\075\034\076\051\077\054\101\064\102\056\001\002" +
    "\000\010\050\uffed\053\uffed\054\uffed\001\002\000\006\053" +
    "\uffee\054\uffee\001\002\000\004\050\u010c\001\002\000\006" +
    "\050\uffeb\054\u010a\001\002\000\040\004\035\005\061\006" +
    "\031\011\053\012\057\013\055\014\047\044\037\045\044" +
    "\047\u0105\075\034\076\051\077\054\101\064\102\056\001" +
    "\002\000\004\050\uffea\001\002\000\010\050\uffec\053\uffec" +
    "\054\uffec\001\002\000\014\006\uffe5\046\uffe5\047\u0115\053" +
    "\uffe5\076\uffe5\001\002\000\016\061\012\062\016\063\004" +
    "\064\010\065\007\100\015\001\002\000\004\050\u0114\001" +
    "\002\000\006\006\022\076\020\001\002\000\004\053\u0112" +
    "\001\002\000\020\050\uffdf\061\012\062\016\063\004\064" +
    "\010\065\007\100\015\001\002\000\004\050\uffde\001\002" +
    "\000\012\006\uffe3\046\uffe3\053\uffe3\076\uffe3\001\002\000" +
    "\016\061\012\062\016\063\004\064\010\065\007\100\015" +
    "\001\002\000\004\050\u0117\001\002\000\012\006\uffe4\046" +
    "\uffe4\053\uffe4\076\uffe4\001\002\000\014\006\uffe2\046\uffe2" +
    "\047\u011c\053\uffe2\076\uffe2\001\002\000\016\061\012\062" +
    "\016\063\004\064\010\065\007\100\015\001\002\000\004" +
    "\050\u011b\001\002\000\012\006\uffe0\046\uffe0\053\uffe0\076" +
    "\uffe0\001\002\000\016\061\012\062\016\063\004\064\010" +
    "\065\007\100\015\001\002\000\004\050\u011e\001\002\000" +
    "\012\006\uffe1\046\uffe1\053\uffe1\076\uffe1\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\012\002\012\003\005\005\004\021\010\001" +
    "\001\000\002\001\001\000\012\002\u011f\003\005\005\004" +
    "\021\010\001\001\000\012\002\u011e\003\005\005\004\021" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\256\014\261\015\260\016\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\022\011\020\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\251\001\001\000\004\060\247\001\001\000\004\033" +
    "\026\001\001\000\012\006\241\007\237\013\235\021\236" +
    "\001\001\000\042\032\233\036\061\037\042\040\045\041" +
    "\051\042\064\043\062\044\032\045\041\046\047\047\031" +
    "\050\044\052\065\053\057\056\037\057\035\001\001\000" +
    "\002\001\001\000\042\032\040\036\061\037\042\040\045" +
    "\041\051\042\064\043\062\044\032\045\041\046\047\047" +
    "\031\050\044\052\065\053\057\056\037\057\035\001\001" +
    "\000\014\050\232\052\065\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\052\217" +
    "\053\057\056\037\057\035\001\001\000\014\050\215\052" +
    "\065\053\057\056\037\057\035\001\001\000\002\001\001" +
    "\000\014\050\214\052\065\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\021\174\034\151\035\102\036" +
    "\104\037\042\040\045\041\051\042\064\043\062\044\032" +
    "\045\041\046\047\047\031\050\044\051\175\052\105\053" +
    "\057\056\037\057\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\050\163\052\065\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\052\154\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\014\050\153\052\065\053\057" +
    "\056\037\057\035\001\001\000\002\001\001\000\012\052" +
    "\150\053\057\056\037\057\035\001\001\000\004\054\101" +
    "\001\001\000\014\050\072\052\065\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\041" +
    "\067\042\064\043\062\044\032\045\041\046\047\047\031" +
    "\050\044\052\065\053\057\056\037\057\035\001\001\000" +
    "\002\001\001\000\030\042\071\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\065\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\035\140\036\104\037\042\040\045\041\051" +
    "\042\064\043\062\044\032\045\041\046\047\047\031\050" +
    "\044\052\105\053\057\055\141\056\037\057\035\001\001" +
    "\000\044\034\103\035\102\036\104\037\042\040\045\041" +
    "\051\042\064\043\062\044\032\045\041\046\047\047\031" +
    "\050\044\052\105\053\057\056\037\057\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\035\133\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\001\001\000\042\035\132\036\104\037\042\040\045" +
    "\041\051\042\064\043\062\044\032\045\041\046\047\047" +
    "\031\050\044\052\105\053\057\056\037\057\035\001\001" +
    "\000\042\035\131\036\104\037\042\040\045\041\051\042" +
    "\064\043\062\044\032\045\041\046\047\047\031\050\044" +
    "\052\105\053\057\056\037\057\035\001\001\000\042\035" +
    "\130\036\104\037\042\040\045\041\051\042\064\043\062" +
    "\044\032\045\041\046\047\047\031\050\044\052\105\053" +
    "\057\056\037\057\035\001\001\000\042\035\127\036\104" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\105\053\057\056\037" +
    "\057\035\001\001\000\042\035\126\036\104\037\042\040" +
    "\045\041\051\042\064\043\062\044\032\045\041\046\047" +
    "\047\031\050\044\052\105\053\057\056\037\057\035\001" +
    "\001\000\042\035\125\036\104\037\042\040\045\041\051" +
    "\042\064\043\062\044\032\045\041\046\047\047\031\050" +
    "\044\052\105\053\057\056\037\057\035\001\001\000\042" +
    "\035\124\036\104\037\042\040\045\041\051\042\064\043" +
    "\062\044\032\045\041\046\047\047\031\050\044\052\105" +
    "\053\057\056\037\057\035\001\001\000\042\035\123\036" +
    "\104\037\042\040\045\041\051\042\064\043\062\044\032" +
    "\045\041\046\047\047\031\050\044\052\105\053\057\056" +
    "\037\057\035\001\001\000\042\035\122\036\104\037\042" +
    "\040\045\041\051\042\064\043\062\044\032\045\041\046" +
    "\047\047\031\050\044\052\105\053\057\056\037\057\035" +
    "\001\001\000\042\035\121\036\104\037\042\040\045\041" +
    "\051\042\064\043\062\044\032\045\041\046\047\047\031" +
    "\050\044\052\105\053\057\056\037\057\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\034\136\035" +
    "\102\036\104\037\042\040\045\041\051\042\064\043\062" +
    "\044\032\045\041\046\047\047\031\050\044\052\105\053" +
    "\057\056\037\057\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\035\140\036\104\037\042\040\045\041\051" +
    "\042\064\043\062\044\032\045\041\046\047\047\031\050" +
    "\044\052\105\053\057\055\144\056\037\057\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\034\151\035\102\036\104\037\042\040\045\041\051" +
    "\042\064\043\062\044\032\045\041\046\047\047\031\050" +
    "\044\052\105\053\057\056\037\057\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\040\156\041\051\042\064" +
    "\043\062\044\032\045\041\046\047\047\031\050\044\052" +
    "\065\053\057\056\037\057\035\001\001\000\002\001\001" +
    "\000\022\045\162\046\047\047\031\050\044\052\065\053" +
    "\057\056\037\057\035\001\001\000\022\045\161\046\047" +
    "\047\031\050\044\052\065\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\037\165\040\045\041\051\042\064\043\062\044" +
    "\032\045\041\046\047\047\031\050\044\052\065\053\057" +
    "\056\037\057\035\001\001\000\002\001\001\000\016\047" +
    "\173\050\044\052\065\053\057\056\037\057\035\001\001" +
    "\000\016\047\172\050\044\052\065\053\057\056\037\057" +
    "\035\001\001\000\016\047\171\050\044\052\065\053\057" +
    "\056\037\057\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\050\200\052\065\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\036\202" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\065\053\057\056\037" +
    "\057\035\001\001\000\002\001\001\000\024\044\212\045" +
    "\041\046\047\047\031\050\044\052\065\053\057\056\037" +
    "\057\035\001\001\000\024\044\211\045\041\046\047\047" +
    "\031\050\044\052\065\053\057\056\037\057\035\001\001" +
    "\000\024\044\210\045\041\046\047\047\031\050\044\052" +
    "\065\053\057\056\037\057\035\001\001\000\024\044\207" +
    "\045\041\046\047\047\031\050\044\052\065\053\057\056" +
    "\037\057\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\021\174\034\151" +
    "\035\102\036\104\037\042\040\045\041\051\042\064\043" +
    "\062\044\032\045\041\046\047\047\031\050\044\051\220" +
    "\052\105\053\057\056\037\057\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\043\225" +
    "\044\032\045\041\046\047\047\031\050\044\052\065\053" +
    "\057\056\037\057\035\001\001\000\026\043\224\044\032" +
    "\045\041\046\047\047\031\050\044\052\065\053\057\056" +
    "\037\057\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\046\231\047\031\050\044\052\065\053\057\056" +
    "\037\057\035\001\001\000\020\046\230\047\031\050\044" +
    "\052\065\053\057\056\037\057\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\244\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\246\013\235\021\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\253\011\020\014\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\026" +
    "\001\001\000\012\006\264\007\237\013\235\021\236\001" +
    "\001\000\006\026\377\061\266\001\001\000\002\001\001" +
    "\000\006\026\267\061\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\004\312\005\313\021\277\022\304" +
    "\023\271\024\301\025\300\026\272\027\274\030\307\031" +
    "\310\034\303\035\102\036\104\037\042\040\045\041\051" +
    "\042\064\043\062\044\032\045\041\046\047\047\031\050" +
    "\044\052\105\053\057\056\037\057\035\061\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\256\014\023\015\260\016\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\022\304\023\326\024\301\025\300\026" +
    "\272\030\307\031\310\034\303\035\102\036\104\037\042" +
    "\040\045\041\051\042\064\043\062\044\032\045\041\046" +
    "\047\047\031\050\044\052\105\053\057\056\037\057\035" +
    "\061\266\001\001\000\044\034\324\035\102\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\022\304\023\315\024" +
    "\301\025\300\026\272\030\307\031\310\034\303\035\102" +
    "\036\104\037\042\040\045\041\051\042\064\043\062\044" +
    "\032\045\041\046\047\047\031\050\044\052\105\053\057" +
    "\056\037\057\035\061\266\001\001\000\010\004\314\005" +
    "\313\021\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\034\317\035\102\036\104\037\042\040\045\041" +
    "\051\042\064\043\062\044\032\045\041\046\047\047\031" +
    "\050\044\052\105\053\057\056\037\057\035\001\001\000" +
    "\002\001\001\000\062\022\321\024\301\025\300\026\272" +
    "\030\307\031\310\034\303\035\102\036\104\037\042\040" +
    "\045\041\051\042\064\043\062\044\032\045\041\046\047" +
    "\047\031\050\044\052\105\053\057\056\037\057\035\061" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\034\331\035\102\036\104" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\105\053\057\056\037" +
    "\057\035\001\001\000\002\001\001\000\062\022\333\024" +
    "\301\025\300\026\272\030\307\031\310\034\303\035\102" +
    "\036\104\037\042\040\045\041\051\042\064\043\062\044" +
    "\032\045\041\046\047\047\031\050\044\052\105\053\057" +
    "\056\037\057\035\061\266\001\001\000\002\001\001\000" +
    "\062\022\335\024\301\025\300\026\272\030\307\031\310" +
    "\034\303\035\102\036\104\037\042\040\045\041\051\042" +
    "\064\043\062\044\032\045\041\046\047\047\031\050\044" +
    "\052\105\053\057\056\037\057\035\061\266\001\001\000" +
    "\002\001\001\000\044\034\340\035\102\036\104\037\042" +
    "\040\045\041\051\042\064\043\062\044\032\045\041\046" +
    "\047\047\031\050\044\052\105\053\057\056\037\057\035" +
    "\001\001\000\044\034\360\035\102\036\104\037\042\040" +
    "\045\041\051\042\064\043\062\044\032\045\041\046\047" +
    "\047\031\050\044\052\105\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\044\034\343\035\102\036\104" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\105\053\057\056\037" +
    "\057\035\001\001\000\044\034\353\035\102\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\044\034\346\035\102" +
    "\036\104\037\042\040\045\041\051\042\064\043\062\044" +
    "\032\045\041\046\047\047\031\050\044\052\105\053\057" +
    "\056\037\057\035\001\001\000\062\022\351\024\301\025" +
    "\300\026\272\030\307\031\310\034\303\035\102\036\104" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\105\053\057\056\037" +
    "\057\035\061\266\001\001\000\002\001\001\000\062\022" +
    "\350\024\301\025\300\026\272\030\307\031\310\034\303" +
    "\035\102\036\104\037\042\040\045\041\051\042\064\043" +
    "\062\044\032\045\041\046\047\047\031\050\044\052\105" +
    "\053\057\056\037\057\035\061\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\022\356\024\301\025\300" +
    "\026\272\030\307\031\310\034\303\035\102\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\061\266\001\001\000\002\001\001\000\062\022\355" +
    "\024\301\025\300\026\272\030\307\031\310\034\303\035" +
    "\102\036\104\037\042\040\045\041\051\042\064\043\062" +
    "\044\032\045\041\046\047\047\031\050\044\052\105\053" +
    "\057\056\037\057\035\061\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\034\370\035\102\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\001\001\000\002\001\001\000\044\034\363\035\102" +
    "\036\104\037\042\040\045\041\051\042\064\043\062\044" +
    "\032\045\041\046\047\047\031\050\044\052\105\053\057" +
    "\056\037\057\035\001\001\000\062\022\366\024\301\025" +
    "\300\026\272\030\307\031\310\034\303\035\102\036\104" +
    "\037\042\040\045\041\051\042\064\043\062\044\032\045" +
    "\041\046\047\047\031\050\044\052\105\053\057\056\037" +
    "\057\035\061\266\001\001\000\002\001\001\000\062\022" +
    "\365\024\301\025\300\026\272\030\307\031\310\034\303" +
    "\035\102\036\104\037\042\040\045\041\051\042\064\043" +
    "\062\044\032\045\041\046\047\047\031\050\044\052\105" +
    "\053\057\056\037\057\035\061\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\022\373\024\301\025\300" +
    "\026\272\030\307\031\310\034\303\035\102\036\104\037" +
    "\042\040\045\041\051\042\064\043\062\044\032\045\041" +
    "\046\047\047\031\050\044\052\105\053\057\056\037\057" +
    "\035\061\266\001\001\000\002\001\001\000\062\022\372" +
    "\024\301\025\300\026\272\030\307\031\310\034\303\035" +
    "\102\036\104\037\042\040\045\041\051\042\064\043\062" +
    "\044\032\045\041\046\047\047\031\050\044\052\105\053" +
    "\057\056\037\057\035\061\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\256\014\023\015\u0102\016\257\001\001\000\002\001" +
    "\001\000\044\020\u0106\035\u0105\036\104\037\042\040\045" +
    "\041\051\042\064\043\062\044\032\045\041\046\047\047" +
    "\031\050\044\052\105\053\057\056\037\057\035\001\001" +
    "\000\046\017\u0107\020\u0108\035\u0105\036\104\037\042\040" +
    "\045\041\051\042\064\043\062\044\032\045\041\046\047" +
    "\047\031\050\044\052\105\053\057\056\037\057\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\017\u010a\020\u0108\035\u0105\036" +
    "\104\037\042\040\045\041\051\042\064\043\062\044\032" +
    "\045\041\046\047\047\031\050\044\052\105\053\057\056" +
    "\037\057\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u010e\021\u010f\001\001\000" +
    "\002\001\001\000\010\010\u0110\011\020\014\023\001\001" +
    "\000\002\001\001\000\006\012\u0112\021\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u0115\021\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u0119\021\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u011c\021\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Parser(InputStream in) {
		this(new Lexer(in));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	static ast.Symbol symbol(String s) {
		return ast.Symbol.symbol(s);
	}
	static util.Position pos(int line, int column) {
		return new util.Position(line, column);
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // constant ::= CHARCONSTANT 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConstant(pos(cleft, cright), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // constant ::= NUMBER 
            {
              Constant RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Number(pos(nleft, nright), n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primaryexpression ::= LPAREN expression RPAREN 
            {
              PrimaryExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParenedExpression(e.pos, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryexpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primaryexpression ::= STRINGCONSTANT 
            {
              PrimaryExpression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConstant(pos(sleft, sright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryexpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primaryexpression ::= constant 
            {
              PrimaryExpression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryexpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primaryexpression ::= ID 
            {
              PrimaryExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(pos(ileft, iright), symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryexpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= assignmentexpression COMMA arguments 
            {
              Arguments RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op h = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arguments t = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(h, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= assignmentexpression 
            {
              Arguments RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // postfix ::= DEC 
            {
              Postfix RESULT =null;
		 RESULT = new BasicPostfix(BasicPostfix.PostfixType.DEC); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // postfix ::= INC 
            {
              Postfix RESULT =null;
		 RESULT = new BasicPostfix(BasicPostfix.PostfixType.INC); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // postfix ::= PTR ID 
            {
              Postfix RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixWithPointer(PostfixWithPointer.PointerType.PTR, symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // postfix ::= POINT ID 
            {
              Postfix RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixWithPointer(PostfixWithPointer.PointerType.POINT, symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // postfix ::= LPAREN RPAREN 
            {
              Postfix RESULT =null;
		 RESULT = new PostfixWithParens(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // postfix ::= LPAREN arguments RPAREN 
            {
              Postfix RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixWithParens(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // postfix ::= LBRACKET expression RBRACKET 
            {
              Postfix RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PostfixWithBrackets(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // postfixexpression ::= postfixexpression postfix 
            {
              PostfixExpression RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PostfixExpression h = (PostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix t = (Postfix)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpression(h.pos, h, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixexpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // postfixexpression ::= primaryexpression 
            {
              PostfixExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrimaryExpression e = (PrimaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixexpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unaryexpression ::= NOT castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unaryexpression ::= DIGIT_NOT castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.DIGIT_NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unaryexpression ::= MINUS castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.MINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unaryexpression ::= PLUS castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.PLUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryexpression ::= TIMES castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.TIMES, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unaryexpression ::= DIGIT_AND castexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.DIGIT_AND, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unaryexpression ::= SIZEOF LPAREN typename RPAREN 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Typename t = (Typename)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SizeofTypenameExpression(pos(xleft, xright), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unaryexpression ::= SIZEOF unaryexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.SIZEOF, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unaryexpression ::= DEC unaryexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.DEC, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unaryexpression ::= INC unaryexpression 
            {
              UnaryExpression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.INC, u); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unaryexpression ::= postfixexpression 
            {
              UnaryExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PostfixExpression e = (PostfixExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpression",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // typename ::= typename TIMES 
            {
              Typename RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Typename t = (Typename)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Typename(t.pos, t.typespecifier, 1+t.stars()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // typename ::= typespecifier 
            {
              Typename RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Typename(t.pos, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // castexpression ::= LPAREN typename RPAREN castexpression 
            {
              CastExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Typename t = (Typename)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpression(pos(lleft, lright), t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // castexpression ::= unaryexpression 
            {
              CastExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryExpression e = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplicativeexpression ::= castexpression MOD multiplicativeexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CastExpression e1 = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.MOD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeexpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiplicativeexpression ::= castexpression DIVIDE multiplicativeexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CastExpression e1 = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIVIDE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeexpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // multiplicativeexpression ::= castexpression TIMES multiplicativeexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CastExpression e1 = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.TIMES, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeexpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // multiplicativeexpression ::= castexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CastExpression e = (CastExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicativeexpression",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // additiveexpression ::= multiplicativeexpression MINUS additiveexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.MINUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveexpression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // additiveexpression ::= multiplicativeexpression PLUS additiveexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.PLUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveexpression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // additiveexpression ::= multiplicativeexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveexpression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // shiftexpression ::= additiveexpression SHR shiftexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.SHR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // shiftexpression ::= additiveexpression SHL shiftexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.SHL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // shiftexpression ::= additiveexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // relationalexpression ::= shiftexpression GE relationalexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.GE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalexpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relationalexpression ::= shiftexpression LE relationalexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.LE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalexpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relationalexpression ::= shiftexpression GT relationalexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.GT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalexpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relationalexpression ::= shiftexpression LT relationalexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.LT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalexpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relationalexpression ::= shiftexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalexpression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // equalityexpression ::= relationalexpression NE equalityexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.NE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityexpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // equalityexpression ::= relationalexpression EQ equalityexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.EQ, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityexpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // equalityexpression ::= relationalexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityexpression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // andexpression ::= equalityexpression DIGIT_AND andexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIGIT_AND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // andexpression ::= equalityexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpression",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exclusiveorexpression ::= andexpression XOR exclusiveorexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.XOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveorexpression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exclusiveorexpression ::= andexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveorexpression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // inclusiveorexpression ::= exclusiveorexpression DIGIT_OR inclusiveorexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIGIT_OR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveorexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // inclusiveorexpression ::= exclusiveorexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveorexpression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logicalandexpression ::= inclusiveorexpression AND logicalandexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.AND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalandexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logicalandexpression ::= inclusiveorexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalandexpression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logicalorexpression ::= logicalandexpression OR logicalorexpression 
            {
              Op RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), e1, Op.OpType.OR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalorexpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // logicalorexpression ::= logicalandexpression 
            {
              Op RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalorexpression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // constantexpression ::= logicalorexpression 
            {
              ConstantExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpression(e.pos, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantexpression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignmentexpression ::= unaryexpression OR_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.OR_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignmentexpression ::= unaryexpression XOR_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.XOR_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignmentexpression ::= unaryexpression AND_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.AND_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignmentexpression ::= unaryexpression SHR_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.SHR_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignmentexpression ::= unaryexpression SHL_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.SHL_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignmentexpression ::= unaryexpression SUB_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.SUB_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignmentexpression ::= unaryexpression ADD_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.ADD_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignmentexpression ::= unaryexpression MOD_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.MOD_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignmentexpression ::= unaryexpression DIV_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.DIV_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignmentexpression ::= unaryexpression MUL_ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.MUL_ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignmentexpression ::= unaryexpression ASSIGN assignmentexpression 
            {
              Op RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		UnaryExpression u = (UnaryExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(xleft, xright), u, Op.OpType.ASSIGN, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignmentexpression ::= logicalorexpression 
            {
              Op RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentexpression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= assignmentexpression COMMA expression 
            {
              Op RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pos(cleft, cright), a, Op.OpType.COMMA, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= assignmentexpression 
            {
              Op RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // jumpstatement ::= RETURN SEMICOLON 
            {
              JumpStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStatement(pos(rleft, rright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpstatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // jumpstatement ::= RETURN expression SEMICOLON 
            {
              JumpStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStatement(pos(rleft, rright), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpstatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // jumpstatement ::= BREAK SEMICOLON 
            {
              JumpStatement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BreakStatement(pos(bleft, bright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpstatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // jumpstatement ::= CONTINUE SEMICOLON 
            {
              JumpStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ContinueStatement(pos(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpstatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // iterationstatement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e3 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), e1, e2, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // iterationstatement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), e1, e2, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // iterationstatement ::= FOR LPAREN expression SEMICOLON SEMICOLON expression RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e3 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), e1, null, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iterationstatement ::= FOR LPAREN expression SEMICOLON SEMICOLON RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Op e1 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), e1, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iterationstatement ::= FOR LPAREN SEMICOLON expression SEMICOLON expression RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e3 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), null, e2, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // iterationstatement ::= FOR LPAREN SEMICOLON expression SEMICOLON RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Op e2 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), null, e2, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iterationstatement ::= FOR LPAREN SEMICOLON SEMICOLON expression RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e3 = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), null, null, e3, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iterationstatement ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN statement 
            {
              IterationStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStatement(pos(fleft, fright), null, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterationstatement ::= WHILE LPAREN expression RPAREN statement 
            {
              IterationStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(pos(wleft, wright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationstatement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // selectionstatement ::= IF LPAREN expression RPAREN statement 
            {
              SelectionStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(pos(ileft, iright), e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectionstatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // selectionstatement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              SelectionStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElseStatement(pos(ileft, iright), e, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectionstatement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statements ::= statement statements 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList t = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementList(s, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statements ::= statement 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementList(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declarations ::= declaration declarations 
            {
              DeclarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclarationList e = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclarationList(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declarations ::= declaration 
            {
              DeclarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclarationList(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compoundstatement ::= NT$1 LBRACE block NT$2 RBRACE 
            {
              CompoundStatement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (CompoundStatement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CompoundStatement b = (CompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundstatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$2 ::= 
            {
              CompoundStatement RESULT =(CompoundStatement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStatement b = (CompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 ParserTest.endScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              CompoundStatement RESULT =null;
 ParserTest.beginScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // block ::= 
            {
              CompoundStatement RESULT =null;
		 RESULT = new CompoundStatement(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block ::= statements 
            {
              CompoundStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompoundStatement(null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block ::= declarations 
            {
              CompoundStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclarationList d = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompoundStatement(d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block ::= declarations statements 
            {
              CompoundStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclarationList d = (DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompoundStatement(d, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressionstatement ::= SEMICOLON 
            {
              ExpressionStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionStatement(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionstatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressionstatement ::= expression SEMICOLON 
            {
              ExpressionStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op e = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionstatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= jumpstatement 
            {
              Statement RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JumpStatement j = (JumpStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = j; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= iterationstatement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterationStatement i = (IterationStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= compoundstatement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStatement c = (CompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= expressionstatement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionStatement e = (ExpressionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= selectionstatement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelectionStatement s = (SelectionStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // plaindeclarator ::= TIMES plaindeclarator 
            {
              PlainDeclarator RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclarator(p.pos, 1+p.stars(), p.getSymbol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plaindeclarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // plaindeclarator ::= ID 
            {
              PlainDeclarator RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclarator(pos(sleft, sright), symbol(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plaindeclarator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // constantexpressionpackage ::= constantexpressionpackage LBRACKET constantexpression RBRACKET 
            {
              ConstantExpressionPackage RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ConstantExpressionPackage d = (ConstantExpressionPackage)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConstantExpression c = (ConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ConstantExpressionPackage(c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantexpressionpackage",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // constantexpressionpackage ::= LBRACKET constantexpression RBRACKET 
            {
              ConstantExpressionPackage RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConstantExpression c = (ConstantExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ConstantExpressionPackage(c, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantexpressionpackage",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declarator ::= plaindeclarator 
            {
              Declarator RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declarator ::= plaindeclarator constantexpressionpackage 
            {
              Declarator RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstantExpressionPackage c = (ConstantExpressionPackage)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaratorWithBrackets(p.pos, p, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declarator ::= plaindeclarator LPAREN RPAREN 
            {
              Declarator RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclaratorWithParameters(p.pos, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declarator ::= plaindeclarator LPAREN parameters RPAREN 
            {
              Declarator RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parameters q = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaratorWithParameters(p.pos, p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // plaindeclaration ::= typespecifier declarator 
            {
              PlainDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclaration(t.pos, t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plaindeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // plaindeclarations ::= typespecifier declarators SEMICOLON plaindeclarations 
            {
              PlainDeclarationList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclaratorList d = (DeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclarationList p = (PlainDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlainDeclarationList(t, d, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plaindeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // plaindeclarations ::= typespecifier declarators SEMICOLON 
            {
              PlainDeclarationList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DeclaratorList d = (DeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlainDeclarationList(t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plaindeclarations",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typespecifier ::= UNION LBRACE plaindeclarations RBRACE 
            {
              TypeSpecifier RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDeclarationList p = (PlainDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnionTypeSpecifier(pos(uleft, uright), p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typespecifier ::= UNION ID LBRACE plaindeclarations RBRACE 
            {
              TypeSpecifier RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDeclarationList p = (PlainDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnionTypeSpecifier(pos(uleft, uright), symbol(i), p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typespecifier ::= UNION ID 
            {
              TypeSpecifier RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnionTypeSpecifier(pos(uleft, uright), symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typespecifier ::= STRUCT LBRACE plaindeclarations RBRACE 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDeclarationList p = (PlainDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTypeSpecifier(pos(sleft, sright), p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typespecifier ::= STRUCT ID LBRACE plaindeclarations RBRACE 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlainDeclarationList p = (PlainDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTypeSpecifier(pos(sleft, sright), symbol(i), p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typespecifier ::= STRUCT ID 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructTypeSpecifier(pos(sleft, sright), symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typespecifier ::= TYPEDEFNAME 
            {
              TypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypedefTypeSpecifier(pos(tleft, tright), symbol(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typespecifier ::= INT 
            {
              TypeSpecifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(pos(ileft, iright), TypeSpecifier.TYPE.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typespecifier ::= CHAR 
            {
              TypeSpecifier RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(pos(cleft, cright), TypeSpecifier.TYPE.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typespecifier ::= VOID 
            {
              TypeSpecifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeSpecifier(pos(vleft, vright), TypeSpecifier.TYPE.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespecifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initializers ::= initializer COMMA initializers 
            {
              InitializerList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitializerList j = (InitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitializerList(i, j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initializers ::= initializer 
            {
              InitializerList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitializerList(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializers",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initializer ::= LBRACE initializers RBRACE 
            {
              Initializer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitializerList i = (InitializerList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BracedInitializer(pos(lleft, lright), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initializer ::= assignmentexpression 
            {
              Initializer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Op a = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BasicInitializer(a.pos, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // initdeclarator ::= declarator ASSIGN initializer 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclarator(pos(dleft, dright), d, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclarator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // initdeclarator ::= declarator 
            {
              InitDeclarator RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclarator(pos(dleft, dright), d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclarator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initdeclarators ::= initdeclarator COMMA initdeclarators 
            {
              InitDeclaratorList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDeclarator i = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclaratorList j = (InitDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclaratorList(i, j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclarators",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // initdeclarators ::= initdeclarator 
            {
              InitDeclaratorList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDeclarator i = (InitDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDeclaratorList(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclarators",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarators ::= declarator COMMA declarators 
            {
              DeclaratorList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaratorList e = (DeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaratorList(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarators ::= declarator 
            {
              DeclaratorList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator d = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclaratorList(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarators",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= basicparameters ELLIPSIS 
            {
              Parameters RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parameters b = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Parameters(new Ellipsis(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameters ::= basicparameters 
            {
              Parameters RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameters b = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // basicparameters ::= plaindeclaration COMMA basicparameters 
            {
              Parameters RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlainDeclaration p = (PlainDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameters q = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameters(p, q); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicparameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basicparameters ::= plaindeclaration 
            {
              Parameters RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlainDeclaration p = (PlainDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameters(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basicparameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functiondefinition ::= typespecifier plaindeclarator LPAREN RPAREN compoundstatement 
            {
              FunctionDefinition RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStatement s = (CompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDefinition(pos(tleft, tright), t, p, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondefinition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functiondefinition ::= typespecifier plaindeclarator LPAREN parameters RPAREN compoundstatement 
            {
              FunctionDefinition RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlainDeclarator p = (PlainDeclarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameters q = (Parameters)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompoundStatement s = (CompoundStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDefinition(pos(tleft, tright), t, p, q, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functiondefinition",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= typespecifier SEMICOLON 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(t.pos, t, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= typespecifier initdeclarators SEMICOLON 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDeclaratorList i = (InitDeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(t.pos, t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= TYPEDEF typespecifier declarators NT$0 SEMICOLON 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DeclaratorList d = (DeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new TypeDeclaration(pos(pleft, pright), t, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Declaration RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeSpecifier t = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaratorList d = (DeclaratorList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 while(d != null) {
									ParserTest.addTypeId(d.head.getSymbol());
									d = d.tail;
							} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= functiondefinition program 
            {
              Program RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDefinition f = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(f, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declaration program 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(d, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= 
            {
              Program RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

