package syntactic;
import	java_cup.runtime.*;
import	java.io.InputStream;
import	ast.*;
import	ast.Number;
import	util.Position;

action code {:
	static ast.Symbol symbol(String s) {
		return ast.Symbol.symbol(s);
	}
	static util.Position pos(int line, int column) {
		return new util.Position(line, column);
	}
:}

parser code {:
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("\tParsing error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

			if (s.left >= 0) {
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0) {
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
		System.exit(1);
	}
	
	public Parser(InputStream in) {
		this(new Lexer(in));
	}
:}
	
/* Terminals (tokens returned by the scanner).	*/
terminal			PLUS, MINUS, TIMES, DIVIDE, MOD, INC, DEC;
terminal			DIGIT_NOT, DIGIT_AND, DIGIT_OR, XOR, SHL, SHR; 
terminal			ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, SHL_ASSIGN, SHR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN;
terminal			EQ, NE, LT, GT, LE, GE, OR, AND, NOT;
terminal			LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMICOLON, COMMA;
terminal			ELLIPSIS, POINT, PTR;
terminal			TYPEDEF, VOID, CHAR, INT, STRUCT, UNION, IF, ELSE, WHILE, FOR, CONTINUE, BREAK, RETURN, SIZEOF;
terminal String		ID, NUMBER, TYPEDEFNAME, STRINGCONSTANT, CHARCONSTANT;

/* Non terminals. */
non terminal Program					program;
non terminal FunctionDefinition			functiondefinition;
non terminal DeclarationList			declarations;
non terminal Declaration				declaration;
non terminal Parameters					parameters;
non terminal DeclaratorList				declarators;
non terminal Declarator					declarator;
non terminal PlainDeclarationList		plaindeclarations;
non terminal PlainDeclaration			plaindeclaration;
non terminal PlainDeclarator			plaindeclarator;
non terminal InitDeclaratorList			initdeclarators;
non terminal InitDeclarator				initdeclarator;
non terminal InitializerList			initializers;
non terminal Initializer				initializer;	
non terminal TypeSpecifier				typespecifier;

non terminal Statement					statement;
non terminal StatementList				statements;
non terminal SelectionStatement			selectionstatement;
non terminal ExpressionStatement		expressionstatement; 
non terminal CompoundStatement			compoundstatement, block;
non terminal IterationStatement			iterationstatement;
non terminal JumpStatement				jumpstatement;

non terminal ConstantExpression			constantexpression;
non terminal ConstantExpressionPackage	constantexpressionpackage;
non terminal Op							expression, assignmentexpression, logicalorexpression, logicalandexpression, inclusiveorexpression, exclusiveorexpression, 
										andexpression, equalityexpression, relationalexpression, shiftexpression, additiveexpression,
										multiplicativeexpression;
non terminal CastExpression				castexpression;
non terminal Typename					typename;
non terminal UnaryExpression			unaryexpression; 
non terminal PostfixExpression			postfixexpression;
non terminal Postfix					postfix;
non terminal Arguments					arguments; 
non terminal PrimaryExpression			primaryexpression;
non terminal Constant					constant;

/* Precedence. */
precedence right	ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, SHL_ASSIGN, SHR_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, INC, DEC;
precedence left		PLUS, MINUS, TIMES, DIVIDE, MOD, EQ, NE, LT, GT, LE, GE, OR, AND, NOT;

start with program;
program ::= /* empty */									{: RESULT = null; :}
		  | declaration:d program:p						{: RESULT = new Program(d, p); :} 
		  | functiondefinition:f program:p				{: RESULT = new Program(f, p); :}					;	  
declaration ::= TYPEDEF:p typespecifier:t declarators:d		
							{: while(d != null) {
									ParserTest.addTypeId(d.head.getSymbol());
									d = d.tail;
							} :} SEMICOLON	{: RESULT = new TypeDeclaration(pos(pleft, pright), t, d); :}
			  | typespecifier:t initdeclarators:i SEMICOLON			{: RESULT = new VarDeclaration(t.pos, t, i); :}		
			  | typespecifier:t SEMICOLON							{: RESULT = new VarDeclaration(t.pos, t, null); :}				;
functiondefinition ::= typespecifier:t plaindeclarator:p LPAREN parameters:q RPAREN compoundstatement:s 	
							{: RESULT = new FunctionDefinition(pos(tleft, tright), t, p, q, s); :}
					 | typespecifier:t plaindeclarator:p LPAREN RPAREN compoundstatement:s
							{: RESULT = new FunctionDefinition(pos(tleft, tright), t, p, null, s); :}								;
parameters ::= plaindeclaration:p								{: RESULT = new Parameters(p); :}
			 | plaindeclaration:p COMMA parameters:q 			{: RESULT = new Parameters(p, q); :}				
			 | ELLIPSIS											{: RESULT = new Ellipsis(); :}										;
declarators ::= declarator:d								{: RESULT = new DeclaratorList(d); :}
			  | declarator:d COMMA declarators:e			{: RESULT = new DeclaratorList(d, e); :}			;
initdeclarators ::= initdeclarator:i						{: RESULT = new InitDeclaratorList(i); :}
				  | initdeclarator:i COMMA initdeclarators:j	{: RESULT = new InitDeclaratorList(i, j); :}		;
initdeclarator ::= declarator:d								{: RESULT = new InitDeclarator(pos(dleft, dright), d); :}	
				 | declarator:d ASSIGN initializer:i		{: RESULT = new InitDeclarator(pos(dleft, dright), d, i); :}				;
initializer ::= assignmentexpression:a						{: RESULT = new BasicInitializer(a.pos, a); :}
			  | LBRACE:l initializers:i RBRACE				{: RESULT = new BracedInitializer(pos(lleft, lright), i); :}				;
initializers ::= initializer:i								{: RESULT = new InitializerList(i); :}
			   | initializer:i COMMA initializers:j			{: RESULT = new InitializerList(i, j); :}				;
typespecifier ::= VOID:v												{: RESULT = new TypeSpecifier(pos(vleft, vright), TypeSpecifier.TYPE.VOID); :}
				| CHAR:c												{: RESULT = new TypeSpecifier(pos(cleft, cright), TypeSpecifier.TYPE.CHAR); :}
				| INT:i													{: RESULT = new TypeSpecifier(pos(ileft, iright), TypeSpecifier.TYPE.INT); :}
				| TYPEDEFNAME:t											{: RESULT = new TypedefTypeSpecifier(pos(tleft, tright), symbol(t)); :}
				| STRUCT:s ID:i											{: RESULT = new StructTypeSpecifier(pos(sleft, sright), symbol(i)); :}
				| STRUCT:s ID:i LBRACE plaindeclarations:p RBRACE		{: RESULT = new StructTypeSpecifier(pos(sleft, sright), symbol(i), p); :}
				| STRUCT:s LBRACE plaindeclarations:p RBRACE			{: RESULT = new StructTypeSpecifier(pos(sleft, sright), p); :}		
				| UNION:u ID:i											{: RESULT = new UnionTypeSpecifier(pos(uleft, uright), symbol(i)); :}
				| UNION:u ID:i LBRACE plaindeclarations:p RBRACE		{: RESULT = new UnionTypeSpecifier(pos(uleft, uright), symbol(i), p); :}
				| UNION:u LBRACE plaindeclarations:p RBRACE				{: RESULT = new UnionTypeSpecifier(pos(uleft, uright), p); :}		;
plaindeclarations ::= typespecifier:t declarators:d SEMICOLON						{: RESULT = new PlainDeclarationList(t, d); :}
					| typespecifier:t declarators:d SEMICOLON plaindeclarations:p	{: RESULT = new PlainDeclarationList(t, d, p); :}		;
plaindeclaration ::= typespecifier:t declarator:d							{: RESULT = new PlainDeclaration(t.pos, t, d); :}						;
declarator ::= plaindeclarator:p LPAREN parameters:q RPAREN					{: RESULT = new DeclaratorWithParameters(p.pos, p, q); :}
			 | plaindeclarator:p LPAREN RPAREN								{: RESULT = new DeclaratorWithParameters(p.pos, p); :}
			 | plaindeclarator:p constantexpressionpackage:c				{: RESULT = new DeclaratorWithBrackets(p.pos, p, c); :}				
			 | plaindeclarator:p											{: RESULT = p; :}												;
constantexpressionpackage ::= LBRACKET constantexpression:c RBRACKET								{: RESULT = new ConstantExpressionPackage(c, null); :}	
							| LBRACKET constantexpression:c RBRACKET constantexpressionpackage:d 	{: RESULT = new ConstantExpressionPackage(c, d); :}	;
plaindeclarator ::= ID:s						{: RESULT = new PlainDeclarator(pos(sleft, sright), symbol(s)); :}
				  | TIMES plaindeclarator:p		{: RESULT = new PlainDeclarator(p.pos, 1+p.stars(), p.getSymbol()); :}			;

statement ::= selectionstatement:s		{: RESULT = s; :}
			| expressionstatement:e		{: RESULT = e; :}
			| compoundstatement:c		{: RESULT = c; :}
			| iterationstatement:i		{: RESULT = i; :}
			| jumpstatement:j			{: RESULT = j; :}														;
expressionstatement ::= expression:e SEMICOLON		{: RESULT = new ExpressionStatement(e); :}
					  | SEMICOLON:s					{: RESULT = new ExpressionStatement(); :}					;
block ::= declarations:d statements:s				{: RESULT = new CompoundStatement(d, s); :} 
	    | declarations:d							{: RESULT = new CompoundStatement(d, null); :}
		| statements:s								{: RESULT = new CompoundStatement(null, s); :}
		| /* empty */								{: RESULT = new CompoundStatement(null, null); :}										;
compoundstatement ::= {: ParserTest.beginScope(); :} LBRACE block:b {: ParserTest.endScope(); :} RBRACE {: RESULT = b; :}					;	
declarations ::= declaration:d								{: RESULT = new DeclarationList(d); :}
			   | declaration:d declarations:e				{: RESULT = new DeclarationList(d, e); :}			;

statements ::= statement:s					{: RESULT = new StatementList(s); :}
			 | statement:s statements:t		{: RESULT = new StatementList(s, t); :}								;
selectionstatement ::= IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2		{: RESULT = new IfElseStatement(pos(ileft, iright), e, s1, s2); :}
					 | IF:i LPAREN expression:e RPAREN statement:s							{: RESULT = new IfStatement(pos(ileft, iright), e, s); :}				;
iterationstatement ::= WHILE:w LPAREN expression:e RPAREN statement:s										{: RESULT = new WhileStatement(pos(wleft, wright), e, s); :}
					 | FOR:f LPAREN  SEMICOLON  SEMICOLON  RPAREN statement:s								{: RESULT = new ForStatement(pos(fleft, fright), null, null, null, s); :}
					 | FOR:f LPAREN  SEMICOLON  SEMICOLON expression:e3 RPAREN statement:s					{: RESULT = new ForStatement(pos(fleft, fright), null, null, e3, s); :}
					 | FOR:f LPAREN  SEMICOLON expression:e2 SEMICOLON  RPAREN statement:s					{: RESULT = new ForStatement(pos(fleft, fright), null, e2, null, s); :}
					 | FOR:f LPAREN  SEMICOLON expression:e2 SEMICOLON expression:e3 RPAREN statement:s		{: RESULT = new ForStatement(pos(fleft, fright), null, e2, e3, s); :}
					 | FOR:f LPAREN expression:e1 SEMICOLON SEMICOLON RPAREN statement:s					{: RESULT = new ForStatement(pos(fleft, fright), e1, null, null, s); :}
					 | FOR:f LPAREN expression:e1 SEMICOLON SEMICOLON expression:e3 RPAREN statement:s		{: RESULT = new ForStatement(pos(fleft, fright), e1, null, e3, s); :}
					 | FOR:f LPAREN expression:e1 SEMICOLON expression:e2 SEMICOLON RPAREN statement:s		{: RESULT = new ForStatement(pos(fleft, fright), e1, e2, null, s); :}
					 | FOR:f LPAREN expression:e1 SEMICOLON expression:e2 SEMICOLON expression:e3 RPAREN statement:s		{: RESULT = new ForStatement(pos(fleft, fright), e1, e2, e3, s); :}	;
jumpstatement ::= CONTINUE:c SEMICOLON				{: RESULT = new ContinueStatement(pos(cleft, cright)); :}
				| BREAK:b SEMICOLON					{: RESULT = new BreakStatement(pos(bleft, bright)); :}
				| RETURN:r expression:e SEMICOLON		{: RESULT = new ReturnStatement(pos(rleft, rright), e); :}
				| RETURN:r SEMICOLON					{: RESULT = new ReturnStatement(pos(rleft, rright)); :}							;

expression ::= assignmentexpression:a								{: RESULT = a; :}
			 | assignmentexpression:a COMMA:c expression:e			{: RESULT = new Op(pos(cleft, cright), a, Op.OpType.COMMA, e); :}			;
assignmentexpression ::= logicalorexpression:a						{: RESULT = a; :}
					   | unaryexpression:u ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.ASSIGN, a); :}
					   | unaryexpression:u MUL_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.MUL_ASSIGN, a); :}
					   | unaryexpression:u DIV_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.DIV_ASSIGN, a); :}
					   | unaryexpression:u MOD_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.MOD_ASSIGN, a); :}
					   | unaryexpression:u ADD_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.ADD_ASSIGN, a); :}
					   | unaryexpression:u SUB_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.SUB_ASSIGN, a); :}
					   | unaryexpression:u SHL_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.SHL_ASSIGN, a); :}
					   | unaryexpression:u SHR_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.SHR_ASSIGN, a); :}
					   | unaryexpression:u AND_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.AND_ASSIGN, a); :}
					   | unaryexpression:u XOR_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.XOR_ASSIGN, a); :}
					   | unaryexpression:u OR_ASSIGN:x assignmentexpression:a
							{: RESULT = new Op(pos(xleft, xright), u, Op.OpType.OR_ASSIGN, a); :}	;
constantexpression ::= logicalorexpression:e					{: RESULT = new ConstantExpression(e.pos, e); :}						;
logicalorexpression ::= logicalandexpression:e					{: RESULT = e; :}
					  | logicalandexpression:e1 OR:x logicalorexpression:e2			{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.OR, e2); :};
logicalandexpression ::= inclusiveorexpression:e				{: RESULT = e; :}
					   | inclusiveorexpression:e1 AND:x logicalandexpression:e2		{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.AND, e2); :};
inclusiveorexpression ::= exclusiveorexpression:e				{: RESULT = e; :}	
					    | exclusiveorexpression:e1 DIGIT_OR:x inclusiveorexpression:e2		{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIGIT_OR, e2); :};
exclusiveorexpression ::= andexpression:e						{: RESULT = e; :}
					    | andexpression:e1 XOR:x exclusiveorexpression:e2		{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.XOR, e2); :}	;
andexpression ::= equalityexpression:e							{: RESULT = e; :}
				| equalityexpression:e1 DIGIT_AND:x andexpression:e2			{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIGIT_AND, e2); :}			;
equalityexpression ::= relationalexpression:e					{: RESULT = e; :}
				     | relationalexpression:e1 EQ:x equalityexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.EQ, e2); :}
					 | relationalexpression:e1 NE:x equalityexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.NE, e2); :}				;
relationalexpression ::= shiftexpression:e						{: RESULT = e; :}
					   | shiftexpression:e1 LT:x relationalexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.LT, e2); :}
					   | shiftexpression:e1 GT:x relationalexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.GT, e2); :}
					   | shiftexpression:e1 LE:x relationalexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.LE, e2); :}
					   | shiftexpression:e1 GE:x relationalexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.GE, e2); :}		;
shiftexpression ::= additiveexpression:e						{: RESULT = e; :}
				  | additiveexpression:e1 SHL:x shiftexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.SHL, e2); :}
				  | additiveexpression:e1 SHR:x shiftexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.SHR, e2); :}						;
additiveexpression ::= multiplicativeexpression:e				{: RESULT = e; :}
					 | multiplicativeexpression:e1 PLUS:x additiveexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.PLUS, e2); :}
					 | multiplicativeexpression:e1 MINUS:x additiveexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.MINUS, e2); :}			;
multiplicativeexpression ::= castexpression:e					{: RESULT = e; :}
						   | castexpression:e1 TIMES:x multiplicativeexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.TIMES, e2); :}
						   | castexpression:e1 DIVIDE:x multiplicativeexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.DIVIDE, e2); :}
						   | castexpression:e1 MOD:x multiplicativeexpression:e2
							{: RESULT = new Op(pos(xleft, xright), e1, Op.OpType.MOD, e2); :}	;
castexpression ::= unaryexpression:e							{: RESULT = e; :}
				 | LPAREN:l typename:t RPAREN castexpression:e	{: RESULT = new CastExpression(pos(lleft, lright), t, e); :}						;
typename ::= typespecifier:t									{: RESULT = new Typename(t.pos, t); :}
		   | typename:t TIMES									{: RESULT = new Typename(t.pos, t.typespecifier, 1+t.stars()); :}	;
unaryexpression ::= postfixexpression:e							{: RESULT = e; :}
				  | INC:x unaryexpression:u						{: RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.INC, u); :}
				  | DEC:x unaryexpression:u						{: RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.DEC, u); :}
				  | SIZEOF:x unaryexpression:u					{: RESULT = new UnaryExpression(pos(xleft, xright), UnaryExpression.PrefixOp.SIZEOF, u); :}
				  | SIZEOF:x LPAREN typename:t RPAREN				{: RESULT = new SizeofTypenameExpression(pos(xleft, xright), t); :}
				  | DIGIT_AND:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.DIGIT_AND, e); :}
				  | TIMES:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.TIMES, e); :}
				  | PLUS:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.PLUS, e); :}
				  | MINUS:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.MINUS, e); :}
				  | DIGIT_NOT:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.DIGIT_NOT, e); :}
				  | NOT:x castexpression:e
							{: RESULT = new UnaryCastExpression(pos(xleft, xright), UnaryCastExpression.UnaryOperator.NOT, e); :}					;
postfixexpression ::= primaryexpression:e						{: RESULT = e; :}
					| postfixexpression:h postfix:t				{: RESULT = new PostfixExpression(h.pos, h, t); :}						;
postfix ::= LBRACKET expression:e RBRACKET		{: RESULT = new PostfixWithBrackets(e); :}
		  | LPAREN arguments:a RPAREN			{: RESULT = new PostfixWithParens(a); :}
		  | LPAREN RPAREN						{: RESULT = new PostfixWithParens(); :}
		  | POINT ID:i							{: RESULT = new PostfixWithPointer(PostfixWithPointer.PointerType.POINT, symbol(i)); :}
		  | PTR ID:i							{: RESULT = new PostfixWithPointer(PostfixWithPointer.PointerType.PTR, symbol(i)); :}
		  | INC									{: RESULT = new BasicPostfix(BasicPostfix.PostfixType.INC); :}
		  | DEC									{: RESULT = new BasicPostfix(BasicPostfix.PostfixType.DEC); :}					;
arguments ::= assignmentexpression:a			{: RESULT = new Arguments(a); :}
			| assignmentexpression:h COMMA arguments:t			{: RESULT = new Arguments(h, t); :}								;
primaryexpression ::= ID:i						{: RESULT = new Var(pos(ileft, iright), symbol(i)); :}
					| constant:c				{: RESULT = c; :}
					| STRINGCONSTANT:s			{: RESULT = new StringConstant(pos(sleft, sright), s); :}
					| LPAREN expression:e RPAREN				{: RESULT = new ParenedExpression(e.pos, e); :}						;
constant ::= NUMBER:n							{: RESULT = new Number(pos(nleft, nright), n); :}
		   | CHARCONSTANT:c						{: RESULT = new CharConstant(pos(cleft, cright), c); :}												;